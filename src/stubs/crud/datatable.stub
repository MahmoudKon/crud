<?php

namespace {{ namespace }};

use {{ modelNamespace }};
use Yajra\DataTables\Services\DataTable;
use Yajra\DataTables\Html\Column;
use Yajra\DataTables\Html\Button;

class {{ class }} extends DataTable
{
    /**
     * Build DataTable class.
     *
     * @param mixed $query Results from query() method.
     * @return \Yajra\DataTables\DataTableAbstract
     */
    public function dataTable($query)
    {
        return datatables()
            ->eloquent($query)
            ->editColumn('action', '{{ dir }}.action')
            ->rawColumns(['action', 'check']);
    }

    /**
     * Get query source of dataTable.
     *
     * @param \{{ modelNamespace }} $model
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function query({{ modelName }} $model)
    {
        return $model->newQuery(){{ withRelations }};
    }

    /**
     * Optional method if you want to use html builder.
     *
     * @return \Yajra\DataTables\Html\Builder
     */
    public function html()
    {
        return $this->builder()
        ->setTableId('{{ table }}-table')
        ->columns($this->getColumns())
        ->minifiedAjax()
        ->dom('Bfrtip')
        ->setTableAttribute('class', 'table table-bordered table-striped table-sm w-100 dataTable')
        ->lengthMenu([[5, 10, 20, 25, 30, -1], [5, 10, 20, 25, 30, 'All']])
        ->pageLength(10)
        ->language([
            "decimal"        => trans('datatable.decimal'),
            "emptyTable"     => trans('datatable.emptyTable'),
            "info"           => trans('datatable.info'),
            "infoEmpty"      => trans('datatable.infoEmpty'),
            "infoFiltered"   => trans('datatable.infoFiltered'),
            "infoPostFix"    => trans('datatable.infoPostFix'),
            "thousands"      => trans('datatable.thousands'),
            "lengthMenu"     => trans('datatable.lengthMenu'),
            "loadingRecords" => trans('datatable.loadingRecords'),
            "processing"     => trans('datatable.processing'),
            "search"         => trans('datatable.search'),
            "zeroRecords"    => trans('datatable.zeroRecords'),
            "paginate"       => [
                "first"    =>  trans('datatable.paginate.first'),
                "last"     =>  trans('datatable.paginate.last'),
                "next"     =>  trans('datatable.paginate.next'),
                "previous" =>  trans('datatable.paginate.previous')
            ],
            "aria" => [
                "sortAscending" =>  trans('datatable.aria.sortAscending'),
                "sortDescending" => trans('datatable.aria.sortDescending')
            ]
        ])
        ->buttons([
            Button::make()->text('<i class="fa fa-plus"></i>')
                    ->addClass('btn btn-info')
                    ->action("window.location.href = '".route("{{ table }}.create")."'")
        ])
        ->responsive(true);
    }

    /**
     * Get columns.
     *
     * @return array
     */
    protected function getColumns()
    {
        return [
            Column::make('id')->title('#')->width('70px'),
            {{ columns }}
            Column::computed('action')->exportable(false)->printable(false)->width(75)->addClass('text-center'),
        ];
    }

    /**
     * Get filename for export.
     *
     * @return stringwithRelations
     */
    protected function filename():string
    {
        return '{{ table }}_' . date('YmdHis');
    }
}
